import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score, KFold, LeaveOneOut
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from keras.datasets import cifar10
from skimage.color import rgb2gray

# Load CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

#Printing dataset
print("Training data shape:", x_train.shape)
print("Training labels shape:", y_train.shape)
print("Testing data shape:", x_test.shape)
print("Testing labels shape:", y_test.shape)

# Preprocess the data if needed (normalize pixel values, flatten or reshape images)
x_train = x_train.reshape(x_train.shape[0], -1)
x_test = x_test.reshape(x_test.shape[0], -1)

# Split data into training and validation sets
x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)

# Define machine learning models
models = {
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'Naive Bayes': GaussianNB(),
    'KNN': KNeighborsClassifier(n_neighbors=5)
}

# Training and evaluation on color images
print("Evaluation on color images:")
for name, model in models.items():
    print(f"Training {name}...")
    model.fit(x_train, y_train)
    y_pred = model.predict(x_val)
    accuracy = accuracy_score(y_val, y_pred)
    precision = precision_score(y_val, y_pred, average='weighted')
    recall = recall_score(y_val, y_pred, average='weighted')
    f1 = f1_score(y_val, y_pred, average='weighted')
    print(f"{name} - Accuracy: {accuracy:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1-score: {f1:.4f}")
    print(f"Evaluation report for {name}:")
    print(classification_report(y_val, y_pred, target_names=['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']))
    print("\n")

# Analyze class imbalance
class_counts = np.bincount(y_train.flatten())
print("Class imbalance:")
for i, count in enumerate(class_counts):
    print(f"Class {i}: {count} samples")

# Evaluation on grayscale images
x_train_gray = np.array([rgb2gray(img.reshape(32, 32, 3)) for img in x_train])
x_val_gray = np.array([rgb2gray(img.reshape(32, 32, 3)) for img in x_val])
x_test_gray = np.array([rgb2gray(img.reshape(32, 32, 3)) for img in x_test])

print("\nEvaluation on grayscale images:")
for name, model in models.items():
    print(f"Training {name}...")
    model.fit(x_train_gray.reshape(x_train_gray.shape[0], -1), y_train)
    y_pred = model.predict(x_val_gray.reshape(x_val_gray.shape[0], -1))
    accuracy = accuracy_score(y_val, y_pred)
    precision = precision_score(y_val, y_pred, average='weighted')
    recall = recall_score(y_val, y_pred, average='weighted')
    f1 = f1_score(y_val, y_pred, average='weighted')
    print(f"{name} - Accuracy: {accuracy:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1-score: {f1:.4f}")
    print(f"Evaluation report for {name}:")
    print(classification_report(y_val, y_pred, target_names=['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']))
    print("\n")
